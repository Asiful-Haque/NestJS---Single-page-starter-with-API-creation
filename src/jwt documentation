‚úÖ 1. JWT Token Generation (Login Flow)
User sends credentials ‚Üí gets token

üîÑ Workflow:
Client (Frontend)
   ‚Üì POST /auth/login
auth.controller.ts
   ‚Üì
auth.service.ts
   ‚Üì
JwtService.sign(payload)   ‚Üê Generates JWT
   ‚Üì
Returns JWT token to client

-----------------------------------------------------------------------------------------------------------------------
npm install @nestjs/jwt @nestjs/passport passport passport-jwt
-----------------------------------------------------------------------------------------------------------------------

‚úÖ 1. Create jwt.strategy.ts file
// src/auth/jwt.strategy.ts  -> This file is for checking and validate whether the given token is valid or not
and giving access to the routes

import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      secretOrKey: 'secret123', // ideally from .env
    });
  }
  async validate(payload: any) {
    return { userId: payload.sub, username: payload.username };
  }
}

-----------------------------------------------------------------------------------------------------------------------

‚úÖ 2. Setup AuthService
// src/auth/auth.service.ts
import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(private jwtService: JwtService) {}

  async login(user: any) {
    const payload = { username: user.username, sub: user.userId };
    return {
      access_token: this.jwtService.sign(payload),
    };
  }
}

----------------------------------------------------------------------------------------------------------------------

‚úÖ 3. Setup AuthController
// src/auth/auth.controller.ts
import { Controller, Post, Body } from '@nestjs/common';
import { AuthService } from './auth.service';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('login')
  async login(@Body() body: { username: string; password: string }) {
    // Normally you'd check against a DB
    if (body.username === 'admin' && body.password === 'pass') {
      return this.authService.login({ username: body.username, userId: 1 });
    } else {
      return { message: 'Invalid credentials' };
    }
  }
}

-----------------------------------------------------------------------------------------------------------------------

‚úÖ 4. Update AuthModule
// src/auth/auth.module.ts
import { Module } from '@nestjs/common';
import { AuthService } from './auth.service';
import { JwtModule } from '@nestjs/jwt';
import { JwtStrategy } from './jwt.strategy';
import { AuthController } from './auth.controller';

@Module({
  imports: [
    JwtModule.register({
      secret: 'secret123',
      signOptions: { expiresIn: '1h' },
    }),
  ],
  controllers: [AuthController],
  providers: [AuthService, JwtStrategy],
})
export class AuthModule {}

----------------------------------------------------------------------------------------------------------------------
‚úÖ 5. Add AuthModule to AppModule
Dont forget to add this on main appmodule
----------------------------------------------------------------------------------------------------------------------

üîê 2. JWT Token Validation (Accessing Protected Routes)
User accesses protected route ‚Üí token is checked ‚Üí response if verified

üîÑ Workflow:

Client (Frontend)
   ‚Üì GET /user/profile   + Authorization: Bearer <token>
user.controller.ts (with @UseGuards(JwtAuthGuard))
   ‚Üì
JwtAuthGuard (extends AuthGuard('jwt'))     ‚Üê Guard triggers
   ‚Üì
JwtStrategy validates token & extracts payload
   ‚Üì
If valid ‚Üí controller gets req.user


-----------------------------------------------------------------------------------------------------------------------

‚úÖ 1. Protect Route using AuthGuard
// src/user/user.controller.ts - on which routes you want to use that
import { Controller, Get, Req, UseGuards } from '@nestjs/common';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';

@Controller('user')
export class UserController {
  @UseGuards(JwtAuthGuard)
  @Get('profile')
  getProfile(@Req() req) {
    return req.user; // from JwtStrategy's validate()
  }
}

----------------------------------------------------------------------------------------------------------------------

‚úÖ 2. Create JwtAuthGuard
// src/auth/jwt-auth.guard.ts
import { Injectable } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';

@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {}




